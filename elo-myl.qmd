---
title: "TOP 500 Elo MyL (Alpha)"
page-layout: article
title-block-banner: false
comments: false
lang: es
toc: false
execute:
  warning: false
  message: false
  echo: false
---

```{=html}
<style>
  .center {
    margin-left: auto;
    margin-right: auto;
  }
  
  table {
    width: 80%;
}

  input.rt-search {
  
}
</style>
```

Ranking Elo de los 500 mejores jugadores de Mitos y Leyendas, formato Racial-Edici칩n de Primer Bloque. Para ver o descargar la lista completa, visita [este link de google sheets](https://docs.google.com/spreadsheets/d/1kR45qa9CH3yiZpRMyTan1Hvmi3DgDkV-Uc2wrSGn1C4/edit?usp=sharing). Si quieres que tu equipo aparezca en el ranking, cont치ctame por [whatsapp](https://wa.me/56978020601) o email a [diabbluis\@gmail.com]{.secondary}.

Si deseas aprender c칩mo funciona el ranking, visita mi [blog post sobre Elo](/posts/intro-a-elo).

<hr>

```{r import-data}
library(tidyverse)
library(googlesheets4)
library(gt)

gs4_auth(email = "diabbluis@gmail.com", cache = ".gargle")

data_path <- "https://docs.google.com/spreadsheets/d/1ZErNDZVSbIP8ekj-mmTpdmJ_Gbpo8yQaN5HeLBlqblE/edit?gid=1605468956#gid=1605468956"

resultados <- read_sheet(data_path, "resultados", col_types = "ciccii")
torneos <- read_sheet(data_path, "torneos", col_types = "ccDDcccccc")
jugadores <- read_sheet(data_path, "jugadores", col_types = "ccc")
ranking <- read_sheet(data_path, "ranking", col_types = "Dcd")
torneos_computados <- read_sheet(data_path, "torneos computados", col_types = "cD")
tiendas <- read_sheet(data_path, "tiendas", col_types = "ccccccccc")

# Filtros
torneos <- torneos |> filter(id_torneo %in% torneos_computados$id_torneo)
resultados <- resultados |> filter(id_torneo %in% torneos_computados$id_torneo)

# Separar sub-razas druida, goblin y minotauro
torneos <- 
  torneos |> 
  mutate(
    raza = str_remove(raza, ".+ / "),
    raza = str_to_title(raza),
    raza = replace_na(raza, "")
  )
```

```{r posiciones}
versiones <- 
  ranking |> 
  pull(version) |> 
  unique() |> 
  sort(decreasing = TRUE)

version_actual <- versiones[1]
version_anterior <- versiones[2]

n_torneos <- length(unique(torneos$id_torneo))

posiciones_anteriores <- 
  ranking |> 
  filter(version == version_anterior) |> 
  mutate(rank = min_rank(-elo))

posiciones_actuales <- 
  ranking |> 
  filter(version == version_actual) |> 
  mutate(rank = min_rank(-elo))

ranking_actualizado <- 
  posiciones_actuales |> 
  left_join(
    posiciones_anteriores, 
    by = join_by(tor), 
    suffix = c("_actual", "_anterior")
  ) |> 
  mutate(
    elo_diff = elo_actual - elo_anterior,
    rank_diff = -(rank_actual - rank_anterior)
  ) |> 
  left_join(jugadores, by = join_by(tor)) |> 
  mutate(
    team = replace_na(team, ""),
    team = str_to_title(team),
    nombre = str_to_title(nombre),
    rank_diff = replace_na(rank_diff, 0)
  )
```

```{r}
resultados_longer <- 
  resultados |>
  group_by(id_torneo, ronda) |>
  mutate(mesa = row_number()) |> 
  ungroup() |> 
  pivot_longer(tor_a:tor_b, names_to = "posicion_j", values_to = "tor") |> 
  pivot_longer(resultado_a:resultado_b, names_to = "posicion_p", values_to = "puntos") |> 
  filter(str_sub(posicion_j, -1) == str_sub(posicion_p, -1)) |>
  select(id_torneo, ronda, mesa, tor, puntos)
  
resultados_razas <- 
  resultados_longer |> 
  left_join(
    torneos |> select(id_torneo, tor, raza), 
    by = join_by(id_torneo, tor)
  )

# wr_jugador <- 
#   resultados_razas |>
#   # Omitir mesas con bye
#   group_by(id_torneo, ronda, mesa) |> 
#   mutate(
#     puntos = if_else(tor == "bye" | is.na(tor), NA, puntos),
#     puntos_totales = sum(puntos)
#   ) |>
#   filter(!is.na(puntos_totales)) |> 
#   ungroup() |> 
#   group_by(tor) |> 
#   summarize(wr = sum(puntos) / sum(puntos_totales), .groups = "drop")

wr_jugador <- 
  resultados_razas |> 
  group_by(id_torneo, ronda, mesa) |> 
  mutate(
    puntos = if_else(tor == "bye" | is.na(tor), NA, puntos),
    puntos_totales = sum(puntos),
    puntos_oponente = puntos_totales - puntos,
    resultado_match = case_when(
      puntos > puntos_oponente ~ 1,
      puntos == puntos_oponente ~ 0.5,
      puntos < puntos_oponente ~ 0
    )
  ) |> 
  filter(!is.na(puntos_totales)) |> 
  ungroup() |> 
  group_by(tor) |> 
  summarize(
    n_matches = n(),
    wr = sum(resultado_match) / n_matches,
    .groups = "drop"
  ) |> 
  select(tor, wr)
 
raza_favorita <- 
  torneos |> 
  # mutate(
  #   raza = str_to_title(raza),
  #   raza = replace_na(raza, "")
  # ) |> 
  slice_max(fecha, n = 5, by = tor) |> 
  group_by(tor, raza) |> 
  mutate(n = n()) |> 
  ungroup(raza) |> 
  slice_max(n, with_ties = TRUE) |> 
  ungroup() |> 
  slice_max(fecha, by = tor, with_ties = FALSE) |> 
  select(tor, raza)

wr_teams <- 
  resultados_razas |> 
  # Omitir mesas con bye
  group_by(id_torneo, ronda, mesa) |> 
  mutate(
    puntos = if_else(tor == "bye" | is.na(tor), NA, puntos),
    puntos_totales = sum(puntos),
    puntos_oponente = puntos_totales - puntos,
    resultado_match = case_when(
      puntos > puntos_oponente ~ 1,
      puntos == puntos_oponente ~ 0.5,
      puntos < puntos_oponente ~ 0
    )
  ) |>
  filter(!is.na(puntos_totales)) |> 
  left_join(jugadores |> select(tor, team), by = join_by(tor)) |> 
  mutate(team = str_to_title(team)) |> 
  # Omitir mesas donde ambos jugadores son del mismo team
  group_by(team, .add = TRUE) |> 
  mutate(team_match = n() == 2) |> 
  filter(!team_match) |> 
  ungroup(id_torneo, ronda, mesa) |> 
  summarize(
    n_matches = n(),
    wr = sum(resultado_match) / n_matches, 
    .groups = "drop"
  ) |> 
  filter(!is.na(team)) |> 
  select(team, wr)

jugadores_activos <- 
  resultados_razas |> 
  left_join(jugadores |> select(tor, team), by = join_by(tor)) |> 
  mutate(team = str_to_title(team)) |> 
  distinct(team, tor) |> 
  count(team, name = "jugadores_activos")
  
elo_medio_team <- 
  ranking_actualizado |> 
  filter(team != "") |> 
  group_by(team) |> 
  summarize(elo_medio = mean(elo_actual, na.rm = TRUE), .groups = "drop")
  
tabla_teams <- 
  ranking_actualizado |> 
  slice_max(elo_actual, by = team) |> 
  select(nombre, elo_actual, team) |> 
  filter(team != "") |> 
  left_join(wr_teams, by = join_by(team)) |> 
  left_join(jugadores_activos, by = join_by(team)) |> 
  left_join(elo_medio_team, by = join_by(team)) |> 
  arrange(desc(elo_medio), desc(jugadores_activos), desc(wr)) |> 
  mutate(rank_actual = row_number()) |> 
  relocate(rank_actual, team, elo_medio, jugadores_activos, wr, nombre, elo_actual)

tabla_ciudad <- 
  resultados_longer |> 
  distinct(id_torneo, tor) |> 
  left_join(torneos |> distinct(id_torneo, tienda), by = join_by(id_torneo)) |> 
  left_join(tiendas |> select(nombre, ciudad), by = join_by(tienda == nombre), relationship = "many-to-one", multiple = "first") |> 
  count(tor, ciudad, name = "n_tourneys") |> 
  slice_max(n_tourneys, by = tor, with_ties = FALSE) |> 
  select(tor, ciudad)
```

#### [Elo MyL v0.2.0](/posts/elo-update-01/index.qmd) Primer Bloque formato Racial Edici칩n

##### Lista actualizada con `r n_torneos` torneos entre `r ymd(versiones[length(versiones)]) |> format("%d de %B del %Y")` y `r ymd(version_actual) |> format("%d de %B del %Y")`

::: panel-tabset
## Jugadores

```{r table}
#| column: body-outset

ranking_actualizado |> 
  left_join(raza_favorita, by = join_by(tor)) |> 
  left_join(wr_jugador, by = join_by(tor)) |> 
  left_join(tabla_ciudad, by = join_by(tor)) |> 
  arrange(rank_actual, rank_anterior) |> 
  slice_max(elo_actual, n = 500, with_ties = FALSE) |> 
  mutate(
    rank_diff = if_else(rank_diff == 0, NA, rank_diff),
    rank_diff_abs = abs(rank_diff),
    elo_diff = if_else(elo_diff == 0, NA, elo_diff)
  ) |> 
  gt(locale = "es-GT") |> 
  opt_table_font(font = "Roboto") |> 
  cols_hide(c(ends_with("_anterior"), version_actual, rank_diff)) |> 
  cols_move(c(nombre, tor, raza, team, ciudad, wr, elo_actual, elo_diff), rank_actual) |>
  tab_options(
    data_row.padding = px(6),
    table.font.size = px(16),
    heading.title.font.size = px(22),
    heading.subtitle.font.size = px(18),
    table.width = px(890),
    table.align = "center",
  ) |> 
  fmt_percent(
    wr,
    decimals = 1,
    dec_mark = ".",
    sep_mark = ""
  ) |> 
  fmt_number(
    elo_actual, 
    decimals = 1, 
    dec_mark = ".",
    # sep_mark = "", 
    use_seps = FALSE, 
  ) |>
  fmt_number(
    elo_diff, 
    decimals = 1, 
    dec_mark = ".",
    sep_mark = "",
    force_sign = TRUE
  ) |> 
  sub_missing(elo_diff, missing_text = "") |> 
  cols_add(dir = case_when(
    rank_diff == 0 | is.na(rank_diff) ~ "minus",
    rank_diff > 0 ~ "arrow-up",
    rank_diff < 0 ~ "arrow-down"
  )) |>  
  fmt_icon(dir, fill_color = list(
    "minus" = "gray40",
    "arrow-up" = "forestgreen",
    "arrow-down" = "red")
  ) |> 
  cols_label(
    rank_actual = md("**#**"),
    rank_diff_abs = "",
    # dir ~ "",
    dir = "",
    tor = md("**TOR**"),
    nombre = md("**Nombre**"),
    raza = md("**Raza favorita**"),
    team = md("**Team**"),
    ciudad = md("**Ciudad**"),
    wr = md("**WR**"),
    elo_actual = md("**Elo**"),
    elo_diff = md("**+/-**")
  ) |> 
  cols_move(c(dir, rank_diff_abs), after = rank_actual) |> 
  cols_width(
    rank_actual ~ px(55),
    rank_diff_abs ~ px(55),
    dir ~ px(20),
    tor ~ px(100),
    nombre ~ px(200),
    raza ~ px(120),
    team ~ px(115),
    ciudad ~ px(120),
    wr ~ px(70),
    elo_actual ~ px(80),
    elo_diff ~ px(70)
  ) |> 
  tab_style(
    locations = cells_body(columns = c(rank_actual, elo_actual)),
    style = cell_text(weight = "bold")
  ) |>
  data_color(
    columns = c(wr),
    palette = c("red", "forestgreen"),
    apply_to = "text",
    domain = c(0.2, 1),
    method = "quantile",
    quantiles = 8,
    na_color = "forestgreen"
  ) |>
  data_color(
    columns = c(elo_diff), 
    palette = c("red", "forestgreen"),
    apply_to = "text",
    method = "quantile", 
    quantiles = 8
  ) |> 
  cols_align("left", c(rank_diff_abs, elo_diff)) |> 
  cols_align("right", dir) |> 
  cols_hide(team) |> 
  # opt_row_striping(row_striping = FALSE) |>
  opt_interactive(
    use_pagination = TRUE,
    use_sorting = TRUE,
    use_search = TRUE,
    use_highlight = TRUE,
    use_text_wrapping = FALSE,
    page_size_default = 10,
    pagination_type = "numbers"
  )
```

## Teams

```{r}
#| column: body-outset

tabla_teams |> 
  arrange(desc(elo_medio), desc(wr)) |> 
  gt(locale = "es-GT") |> 
  opt_table_font(font = "Roboto") |> 
  tab_options(
    data_row.padding = px(6),
    table.font.size = px(16),
    heading.title.font.size = px(22),
    heading.subtitle.font.size = px(18),
    table.width = px(895),
    table.align = "center",
  ) |> 
  fmt_percent(
    wr,
    decimals = 1,
    dec_mark = ".",
    sep_mark = ""
  ) |> 
  fmt_number(
    c(elo_medio, elo_actual), 
    decimals = 1, 
    dec_mark = ".",
    # sep_mark = "",
    use_seps = FALSE
  ) |> 
  sub_missing(wr, missing_text = "") |> 
  cols_label(
    rank_actual = md("**#**"),
    # rank_diff ~ "",
    # dir ~ "",
    team = md("**Nombre**"),
    jugadores_activos = md("**Miembros**"),
    elo_medio = md("**Elo medio**"),
    wr = md("**WR**"),
    nombre = md("**Mejor jugador**"),
    elo_actual = md("**Elo mejor jugador**")
  ) |> 
  cols_width(
    rank_actual ~ px(40),
    # rank_diff ~ px(40),
    # dir ~ px(20),
    team ~ px(180),
    jugadores_activos ~ px(95),
    elo_medio ~ px(95),
    wr ~ px(70),
    nombre ~ px(260),
    elo_actual ~ px(150)
  ) |> 
  tab_style(
    locations = cells_body(columns = c(rank_actual, elo_medio)),
    style = cell_text(weight = "bold")
  ) |>
  data_color(
    columns = c(wr), 
    palette = c("red", "forestgreen"),
    apply_to = "text",
    domain = c(0, 1)
  ) |> 
  cols_align("left", c(rank_actual, team, elo_medio, wr, elo_actual)) |>
  cols_align("right", c(nombre, jugadores_activos)) |>
  opt_row_striping(row_striping = FALSE) |>
  opt_interactive(
    use_pagination = TRUE,
    use_sorting = TRUE,
    use_search = TRUE,
    use_highlight = TRUE,
    use_text_wrapping = FALSE,
    page_size_default = 10,
    pagination_type = "numbers"
  )
```

:::


